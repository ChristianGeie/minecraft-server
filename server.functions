#!/bin/bash
# minecraft server functions

# this file stores all the functions for the server.
# please note that those function are global and impact every script.

# please notice that editing these functions can be devastating
# if you know what you are doing, feel free to tinker with them ;^)

# function for parsing arguments for a script
function ParseScriptArguments {
	now=false
	quiet=false
	verbose=false
	while [[ $# -gt 0 ]]; do
		case "$1" in
			-n)
				now=true
			;;
			-q)
				quiet=true
			;;
			-v)
				verbose=true
			;;
			--now)
				now=true
			;;
			--quiet)
				quiet=true
			;;
			--verbose)
				verbose=true
			;;
			*)
				echo "bad argument: $1"
				exit 1
			;;
		esac
		shift
	done
}


# check if verbose mode is on
function CheckVerbose {
	if [[ ${verbose} == true ]]; then
		return true
	fi
}
# checks if debug mode is on
function CheckDebug {
	if [[ ${enabledebug} == true ]]; then
		return true
	fi
}
# check if quiet mode is on
function CheckQuiet {
	if [[ ${quiet} == true ]]; then
		return true
	fi
}


# prints all unpit to terminal
function PrintToTerminal {
	if [[ $1 == "ok" ]]; then
	echo "${green}ok: ${2}${nocolor}"
	fi
	if [[ $1 == "info" ]]; then
	echo "${nocolor}info: ${2}${nocolor}"
	fi
	if [[ $1 == "warn" ]]; then
	echo "${yellow}warn: ${2}${nocolor}"
	fi
	if [[ $1 == "error" ]]; then
	echo "${red}error: ${2}${nocolor}"
	fi
	if [[ $1 == "fatal" ]]; then
	echo "${red}fatal: ${2}${nocolor}"
	fi
	if [[ $1 == "action" ]]; then
	echo "${cyan}action: ${2}${nocolor}"
	fi
}
# prints all input to screen
function PrintToScreen {
	screen -Rd ${servername} -X stuff "${1}$(printf '\r')"
}
# prints all input to log
function PrintToLog {
	if [[ $1 == "ok" ]]; then
		echo "ok: ${2}" >> "${3}"
	fi
	if [[ $1 == "info" ]]; then
		echo "info: ${2}" >> "${3}"
	fi
	if [[ $1 == "warn" ]]; then
		echo "warn: ${2}" >> "${3}"
	fi
	if [[ $1 == "error" ]]; then
		echo "error: ${2}" >> "${3}"
	fi
	if [[ $1 == "fatal" ]]; then
		echo "fatal: ${2}" >> "${3}"
	fi
	if [[ $1 == "action" ]]; then
		echo "action: ${2}" >> "${3}"
	fi
}


# prints success messages to terminal
function PrintToTerminalBackupSuccess {
	PrintToTerminal "ok" "added ${backupdirectory}/hourly/${servername}-${1}.tar.gz"
	PrintToTerminal "ok" "removed ${backupdirectory}/hourly/${servername}-${2}.tar.gz"
	PrintToTerminal "ok" "current world size: ${worldsize}, current backup size: ${backupsize}, current disk space: ${diskspace}"
	PrintToTerminal "ok" "time spent on backup process: ${timespent} milliseconds, compression ratio: ${compressedbackup}/${worldsize}"
}
# prints success messages to screen
function PrintToScreenBackupSuccess {
	PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"successfully created new backup\",\"color\":\"green\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"created file: ${servername}-${1}.tar.gz, removed file: ${servername}-${2}.tar.gz, current world size: ${worldsize}, current backup size: ${backupsize}, current disk space: ${diskspace}, time spent: ${timespent} ms, compression: ${compressedbackup}/${worldsize}\"}]}}}]"
}
# prints backup success to backup log
function PrintToLogBackupSuccess {
	PrintToLog "ok" "added ${backupdirectory}/hourly/${servername}-${1}.tar.gz" "${backuplog}"
	PrintToLog "ok" "removed ${backupdirectory}/hourly/${servername}-${2}.tar.gz" "${backuplog}"
	PrintToLog "ok" "current world size: ${worldsize}, current backup size: ${backupsize}, current disk space: ${diskspace}" "${backuplog}"
	PrintToLog "ok" "time spent on backup process: ${timespent} milliseconds, compression ratio: ${compressedbackup}/${worldsize}" "${backuplog}"
	echo "" >> "${backuplog}"
}


# prints backup already exists to terminal
function PrintToTerminalBackupAlreadyExists {
	PrintToTerminal "error" "could not create new ${1}-backup - backup already exists"
}
# prints backup already exists to screen
function PrintToScreenBackupAlreadyExists {
	PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"warning: backup already exists - please tell your server admin\",\"color\":\"yellow\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"could not create file: ${servername}-${1}.tar.gz, could not remove file: ${servername}-${2}.tar.gz, reason: backup already exists\"}]}}}]"
}
# prints backup already exists to log
function PrintToLogBackupAlreadyExists {
	PrintToLog "error" "could not create new ${1}-backup - backup already exists" "${backuplog}"
	echo "" >> "${backuplog}"
}


# prints disk space warnig to terminal
function PrintToTerminalDiskSpaceWarning {
	PrintToTerminal "warn" "free disk-space is getting rare - make some room for backups"
}
# prints disk space warning to screen
function PrintToScreenDiskSpaceWarning {
	PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"warning: free disk space is getting rare - please tell your server admin\",\"color\":\"yellow\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"current world size: ${worldsize}, current backup size: ${backupsize}, current disk space: ${diskspace}, warning: free disk space is getting rare\"}]}}}]"
}
# prints disk space warning to log
function PrintToLogDiskSpaceWarning {
	PrintToLog "warn" "free disk-space is getting rare - make some room for backups" "${backuplog}"
	echo "" >> "${backuplog}"
}


# prints not enough disk space to terminal
function PrintToTerminalNotEnoughDiskSpace {
	PrintToTerminal "error" "not enough disk-space to perform backup-${1}"
}
# prints not enough disk space to screen
function PrintToScreenNotEnoughtDiskSpace {
	PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"fatal: not enough disk space - please immediately tell your server admin\",\"color\":\"red\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"could not create file: ${servername}-${1}.tar.gz, could not remove file: ${servername}-${2}.tar.gz, reason: not enough disk-space\"}]}}}]"
}
# prints not enough disk space to backup log
function PrintToLogNotEnoughDiskSpace {
	PrintToLog "error" "not enough disk-space to perform backup-${1}" "${backuplog}"
	echo "" >> "${backuplog}"
}


# prints backup error to backup log
function PrintToTerminalBackupError {
	PrintToTerminal "warn" "cannot remove old backup because new backup is missing"
	PrintToTerminal "warn" "could not remove old backup"
	PrintToTerminal "error" "could not backup world"
}
# prints error messages to screen
function PrintToScreenBackupError {
	PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"fatal: could not create new backup - please immediately tell your server admin\",\"color\":\"red\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"could not create file: ${servername}-${1}.tar.gz, could not remove file: ${servername}-${2}.tar.gz, reason: missing directories, empty file-path or empty files\"}]}}}]"
}
# prints backup error to log
function PrintToLogBackupError {
	PrintToLog "warn" "cannot remove old backup because new backup is missing" "${backuplog}"
	PrintToLog "warn" "could not remove old backup" "${backuplog}"
	PrintToLog "error" "could not backup world" "${backuplog}"
	echo "" >> "${backuplog}"
}


# creates a Progressbar function
function ProgressBar {
	# process data
	let progress=(${2}*100/${3}*100)/100
	let done=(${progress}*4)/10
	let left=40-${done}
	# build progressbar string lengths
	fill=$(printf "%${done}s")
	empty=$(printf "%${left}s")
	# terminal output
	printf "\r${1} [${fill// /#}${empty// /-}] ${progress}%% "
}

# function for testing if all categories for backups exists if not create them also check for root backups directory
function CheckBackupDirectoryIntegrity {
	cd ${serverdirectory}
	# check for root backup directory and create if missing
	if ! ls ${backupdirectory} &> /dev/null; then
		PrintToLog "error" "the root-backupdirectory is missing - your backups are likely gone :(" "${backuplog}"
		PrintToLog "info" "creating a new root-backupdirectory with name backups at ${serverdirectory}" "${backuplog}"
		echo "" >> "${backuplog}"
		PrintToTerminal "error" "the root-backupdirectory is missing - your backups are likely gone :("
		PrintToTerminal "info" "creating a new root-backupdirectory with name backups at ${serverdirectory}"
		mkdir backups
	fi
	declare -a backupcategories=( "cached" "hourly" "daily" "weekly" "monthly" )
	arraylenght=${#backupcategories[@]}
	for (( i = 1; i < ${arraylenght} + 1; i ++ )); do
		# check for backup category directories and create if missing
		if ! ls ${backupdirectory}/${backupcategories[${i}-1]} &> /dev/null; then
			PrintToLog "warn" "the backup-directory ${backupcategories[${i}-1]} is missing" "${backuplog}"
			PrintToLog "info" "creating ${backupdirectory}/${backupcategories[${i}-1]}" "${backuplog}"
			echo "" >> ${backuplog}
			PrintToTerminal "warn" "the backup-directory ${backupcategories[${i}-1]} is missing"
			PrintToTerminal "info" "creating ${backupdirectory}/${backupcategories[${i}-1]}"
			cd ${backupdirectory}
			mkdir ${backupcategories[${i}-1]}
			cd ${serverdirectory}
		fi
	done
}

# function for fetching scripts from github with error checking
function FetchScriptFromGitHub {
	wget --spider --quiet "https://raw.githubusercontent.com/Simylein/MinecraftServer/${branch}/${1}"
	if [ "$?" != 0 ]; then
		PrintToTerminal "fatal" "Unable to connect to GitHub API. Script will exit! (maybe chose another branch?)"
		exit 1
	else
		if [[ CheckVerbose ]]; then
			PrintToTerminal "info" "fetching file: ${1} from branch ${branch} on GitHub..."
		fi
		wget -q -O "${1}" "https://raw.githubusercontent.com/Simylein/MinecraftServer/${branch}/${1}"
fi
}

# function for removing scripts from serverdirectory
function RemoveScriptsFromServerDirectory {
	# user info about download
	PrintToTerminal "info" "removing scripts in serverdirectory..."
	# remove scripts from serverdirectory
	# declare all scripts in an array
	declare -a scripts=( "LICENSE" "README.md" "start.sh" "restore.sh" "reset.sh" "restart.sh" "stop.sh" "backup.sh" "update.sh" "maintenance.sh" "prerender.sh" "watchdog.sh" "welcome.sh" "worker.sh" "vent.sh" )
	# get length of script array
	scriptslength=${#scripts[@]}
	# loop through all entries in the array
	for (( i = 1; i < ${scriptslength} + 1; i ++ )); do
		if [[ CheckVerbose ]]; then
			PrintToTerminal "info" "removing script ${scripts[${i}-1]}"
		fi
		rm "${scripts[${i}-1]}"
	done
}

# function for downloading scripts from github
function DownloadScriptsFromGitHub {
	# user info about download
	PrintToTerminal "info" "downloading scripts from GitHub..."
	# downloading scripts from github
	# declare all scripts in an array
	declare -a scripts=( "LICENSE" "README.md" "start.sh" "restore.sh" "reset.sh" "restart.sh" "stop.sh" "backup.sh" "update.sh" "maintenance.sh" "prerender.sh" "watchdog.sh" "welcome.sh" "worker.sh" "vent.sh" )
	# get length of script array
	scriptslength=${#scripts[@]}
	# loop through all entries in the array
	for (( i = 1; i < ${scriptslength} + 1; i ++ )); do
		FetchScriptFromGitHub "${scripts[${i}-1]}"
	done
}

# function for making scripts executable
function MakeScriptsExecutable {
	# make selected scripts executable
	# declare all scripts in an array
	declare -a scripts=( "start.sh" "restore.sh" "reset.sh" "restart.sh" "stop.sh" "backup.sh" "update.sh" "maintenance.sh" "prerender.sh" "watchdog.sh" "welcome.sh" "worker.sh" "vent.sh" )
	# get length of script array
	scriptslength=${#scripts[@]}
	# loop through all entries in the array
	for (( i = 1; i < ${scriptslength} + 1; i ++ )); do
		if [[ CheckVerbose ]]; then
			PrintToTerminal "info" "setting script ${scripts[${i}-1]} executable"
		fi
		chmod +x ${scripts[${i}-1]}
	done
}

# function for creating a safety backup
function CreateSafetyBackup {
	# remove all older safety backups
	if [[ -s "${backupdirectory}/cached/safety-"* ]]; then
		rm "${backupdirectory}/cached/safety-"*
	fi
	# create backup
	PrintToTerminal "action" "creating safety backup..."
	tar -czf "world.tar.gz" "world" && mv "${serverdirectory}/world.tar.gz" "${backupdirectory}/cached/safety-${newdaily}-${newhourly}.tar.gz"
	# check if safety backup exists
	if ! [[ -s "${backupdirectory}/cached/safety-${newdaily}-${newhourly}.tar.gz" ]]; then
		# terminal output
		PrintToTerminal "warn" "safety backup failed"
		# ingame output
		PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"backup failed\",\"color\":\"red\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"file ${backupdirectory}/cached/safety-${newdaily}-${newhourly}.tar.gz does not exist\"}]}}}]"
		# logfile output
		PrintToLog "warn" "safety backup failed" "${backuplog}"
		echo "" >> ${backuplog}
	else
		# terminal output
		PrintToTerminal "ok" "safety backup successful"
		# ingame output
		PrintToScreen "tellraw @a [\"\",{\"text\":\"[Backup] \",\"color\":\"gray\",\"italic\":true},{\"text\":\"backup successful\",\"color\":\"green\",\"italic\":true,\"hoverEvent\":{\"action\":\"show_text\",\"value\":{\"text\":\"\",\"extra\":[{\"text\":\"created ${backupdirectory}/cached/safety-${newdaily}-${newhourly}.tar.gz\"}]}}}]"
		# logfile output
		PrintToLog "ok" "created ${backupdirectory}/cached/safety-${newdaily}-${newhourly}.tar.gz as a safety backup" "${backuplog}"
		echo "" >> "${backuplog}"
	fi
}


# check for safety backup string
function CheckSafetyBackupString {
	if tail -1 "${screenlog}" | grep -q "perform safety backup"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform safety backup)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested a safety backup of the server\"}]"
			PrintToLog "info" "The player ${player} requested a safety backup and has permission - server will perform safety backup" "${backuplog}"
			echo "" >> "${backuplog}"
			# run safety backup
			CreateSafetyBackup
			# spam protection
			sleep 20s
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to safety backup the server\"}]"
			PrintToLog "warn" "The player ${player} requested a safety backup and does not have permission to do so" "${backuplog}"
			echo "" >> "${backuplog}"
		fi
	fi
}
# check for confirm restart strings
function CheckConfirmRestartString {
	# check for perform restart now string
	if tail -1 "${screenlog}" | grep -q "perform restart now"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform restart now)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested a restart of the server\"}]"
			PrintToLog "info" "the player ${player} requested a restart and has permission - server will restart" "${screenlog}"
			./restart.sh --quiet --now
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to restart the server\"}]"
			PrintToLog "warn" "the player ${player} requested a restart and does not have permission to do so" "${screenlog}"
		fi
	fi
	# check for perform restart string
	if tail -1 "${screenlog}" | grep -q "perform restart"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform restart)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested a restart of the server\"}]"
			PrintToLog "info" "the player ${player} requested a restart and has permission - server will restart" "${screenlog}"
			./restart.sh --quiet
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to restart the server\"}]"
			PrintToLog "warn" "the player ${player} requested a restart and does not have permission to do so" "${screenlog}"
		fi
	fi
}
# check for confirm update strings
function CheckConfirmUpdateString {
	# check for perform update now string
	if tail -1 "${screenlog}" | grep -q "perform update now"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform update now)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested an update of the server\"}]"
			PrintToLog "info" "the player ${player} requested an update and has permission - server will update" "${screenlog}"
			./update.sh --quiet --immediately
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to update the server\"}]"
			PrintToLog "warn" "the player ${player} requested an update and does not have permission to do so" "${screenlog}"
		fi
	fi
	# check for perform update string
	if tail -1 "${screenlog}" | grep -q "perform update"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform update)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested an update of the server\"}]"
			PrintToLog "info" "the player ${player} requested an update and has permission - server will update" "${screenlog}"
			./update.sh --quiet
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to update the server\"}]"
			PrintToLog "warn" "the player ${player} requested an update and does not have permission to do so" "${screenlog}"
		fi
	fi
}
# check for confirm reset strings
function CheckConfirmResetString {
	# check for perform reset now string
	if tail -1 "${screenlog}" | grep -q "perform reset now"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform reset now)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested a reset of the server\"}]"
			PrintToLog "info" "the player ${player} requested a reset and has permission - server will reset" "${screenlog}"
			./reset.sh --immediately
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to reset the server\"}]"
			PrintToLog "warn" "the player ${player} requested a reset and does not have permission to do so" "${screenlog}"
		fi
	fi
	# check for perform reset string
	if tail -1 "${screenlog}" | grep -q "perform reset"; then
		player=$(tail -1 screen.log | grep -oP '.*?(?=perform reset)' | cut -d ' ' -f 4- | sed 's/.$//' | rev | sed 's/.$//' | rev | sed 's/.$//')
		if cat "ops.json" | grep -q "${player}"; then
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You successfully requested a reset of the server\"}]"
			PrintToLog "info" "the player ${player} requested a reset and has permission - server will reset" "${screenlog}"
			./reset.sh
			exit 0
		else
			PrintToScreen "tellraw ${player} [\"\",{\"text\":\"[Script] \",\"color\":\"blue\"},{\"text\":\"You do not have permissions to reset the server\"}]"
			PrintToLog "warn" "the player ${player} requested a reset and does not have permission to do so" "${screenlog}"
		fi
	fi
}


# prints game over as pixel art on terminal
function PrintGameOver {
	echo "${red}    ______                       _____                     ${nocolor}"
	echo "${red}   / _____)                     / ___ \                    ${nocolor}"
	echo "${red}  | /  ___  ____ ____   ____   | |   | |_   _ ____  ____   ${nocolor}"
	echo "${red}  | | (___)/ _  |    \ / _  )  | |   | | | | / _  )/ ___)  ${nocolor}"
	echo "${red}  | \____/( ( | | | | ( (/ /   | |___| |\ V ( (/ /| |      ${nocolor}"
	echo "${red}   \_____/ \_||_|_|_|_|\____)   \_____/  \_/ \____)_|      ${nocolor}"
	echo "${red}                                                           ${nocolor}"
}
